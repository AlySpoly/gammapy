#!/usr/bin/env python
"""Apply the a trous wavelet transform on a 2D image.

This book contains an overview of methods: 
http://www.amazon.de/dp/3540330240

Specifically I'd like to have an a trous transform.
Here's a few references that look useful:
* https://code.google.com/p/image-funcut/

I'm also interested in these transforms: 
* http://scikit-image.org/docs/dev/api/skimage.transform.html#pyramid-expand
* http://scikit-image.org/docs/dev/api/skimage.transform.html#pyramid-gaussian
* http://scikit-image.org/docs/dev/api/skimage.transform.html#pyramid-laplacian
* http://scikit-image.org/docs/dev/api/skimage.transform.html#pyramid-reduce
"""

import logging
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(message)s')
from astropy.io import fits

def atrous(image, n_levels):
    """Compute a trous transform for a given image.
    
    image : 2d array
    n_levels : integer
    returns : list of 2d arrays
    """
    # https://code.google.com/p/image-funcut/
    from imfun import atrous
    return atrous.decompose2d(image, level=n_levels)

def atrous_hdu(hdu, n_levels):
    """Compute a trous transform for a given FITS HDU
    
    hdu : 2d image HDU
    n_levels : integer
    returns : HDUList
    """
    image = hdu.data
    logging.info('Computing a trous transform for {0} levels ...'.format(n_levels))
    images = atrous(image, n_levels)
    hdus = fits.HDUList()
    for level, image in enumerate(images):
        if level < len(images) - 1:
            name = 'level_{0}'.format(level)
        else:
            name = 'residual'
        scale_pix = 2 ** level
        scale_deg = hdu.header['CDELT2'] * scale_pix
        logging.info('HDU name = {0:10s}: scale = {1:5d} pix = {2:10.5f} deg'
                     ''.format(name, scale_pix, scale_deg))
        hdus.append(fits.ImageHDU(data=image, header=hdu.header, name=name))
    return hdus

if __name__ == '__main__':
    # TODO: add option to copy over input file
    # TODO: add option to select input HDU name or number
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=str,
                        help='Input FITS file name')
    parser.add_argument('outfile', type=str,
                        help='Output FITS file name')
    parser.add_argument('n_levels', type=int,
                        help='Number of levels (wavelet scales)')
    parser.add_argument('--clobber', action='store_true',
                        help='Clobber output files?')
    args = parser.parse_args()
    args = vars(args)

    logging.info('Reading {0}'.format(args['infile']))    
    hdu = fits.open(args['infile'])[0]
    atrous_hdus = atrous_hdu(hdu, n_levels=args['n_levels'])

    logging.info('Writing {0}'.format(args['outfile']))
    atrous_hdus.writeto(args['outfile'], clobber=args['clobber'])